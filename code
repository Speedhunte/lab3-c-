#include <iostream>
#include <fstream>


using namespace std;

template<typename T>
class Matrix {

private:
    int N;// строки
    int M;// столбцы

public:
    T** data;

    void Test()
    {
        for (int i = 0; i < N; i++)
        {
            for (int j = 0; j < M; j++)
                this->data[i][j]=rand() %10;
 
        }
    }
    void Print()
    {

        for (int i = 0; i < N; i++)
        {
            for (int j = 0; j < M; j++)
                cout<< this->data[i][j]<<" ";
            cout << endl;
        }
        
    }
    void in() { //метод заполняет матрицу значениями из файла
        for (int i = 0; i < N; i++)
        {
            delete[] data[i];
        }
        delete[] data;

        ifstream input("input.txt");
        if (!input) {
            cout << "Файл не найден" << endl;
        }
        input >> N;
        input >> M;
       

        data = new T*[N];
        for (int i = 0; i < N; ++i)
        {
            data[i] = new int[M];
        }

        for (int i = 0; i < N; i++)
        {
            for (int j = 0; j < M; j++)
                input >> this->data[i][j];
        }


    }


    void out() { //метод выгружает  матрицу и ее размер в файл
        ofstream output("output.txt ");
        if (!output)
            cout << " файл не открывается" << endl;

        output << this->N << endl;
        output << this->M << endl;


        for (int i = 0; i < this->N; i++) {

            for (int j = 0; j < this->M; j++)
                output << this->data[i][j];
        }
        output << endl;


    }



    Matrix(int N, int M) { //конструктор создает матрицу указанного размера и заполняет нулями
        this->N = N;
        this->M = M;
        this->data = new T*[N];
        for (int i = 0; i < N; i++)
        {
            data[i] = new int[M];
        }
        for (int n = 0; n < N; n++)
        {
            for (int j = 0; j < M; j++)
                data[n][j] = 0;
        }

    }


    Matrix() { //конструктор считывает из файла
        ifstream input("output.txt");

        if (!input) {
            cout << "Файл не найден" << endl;
        }
        else {
            input >> N;
            input >> M;
            

            data= new T*[N];
            for (int i = 0; i < N; ++i)
            {
                data[i] = new int[M];
            }

            for (int n = 0; n < N; n++)
            {
                for (int j = 0; j < M; j++)
                    input >> data[n][j];
            }
        }

    }


    Matrix<T> operator *(const Matrix& other) //перегрузка умножения матриц
    { 

        if (this->M != other.N)
            cout << "Нельзя умножить";
        else {
            Matrix <T> temp(other.N, other.M);
            for (int i = 0; i < other.N; i++) {
                for (int j = 0; j < other.M; j++) {

                    temp.data[i][j] = 0;
                    for (int k = 0; k < other.N; k++)
                        temp.data[i][j] += (this->data[i][k] * other.data[k][j]);

                }
            }
            return temp;
        }

    }



    Matrix<T> operator *(int a) // прегрузка оператор умножения матрицы на скаляр
    {
        Matrix <T> temp(this->N, this->M);

        for (int i = 0; i < this->N; i++) {
            for (int j = 0; j < this->M; j++)
            {
                temp.data[i][j] = 0;
                temp.data[i][j] += this->data[i][j] * a;
            }
        }
    
        return *temp;
    }

   
    Matrix<T> changerows(int a, int b) //меняет строки a u b местами
    {
        Matrix<T> temp (1,this->M);
       
        for (int j = 0; j < this->M; j++) {
               
             temp.data[0][j] = this->data[a][j];
             this->data[a][j] = this->data[b][j];          
        }     
        for (int j = 0; j < this->M; j++) {

            this->data[b][j] = temp.data[0][j];
        }
        for (int i = 0; i < N; i++)
            delete[] temp.data[i];
        
        delete[] temp.data;
        return *this;
    }

    
    Matrix<T> changecolumns(int a, int b) //меняет столбцы a u b местами
    {
        Matrix<T> temp(this->N, 1);

        for (int j = 0; j < this->N; j++) {

            temp.data[j][0] = this->data[j][a];
            this->data[j][a] = this->data[j][b];
        }
        for (int j = 0; j < this->M; j++) {

            this->data[j][b] = temp.data[j][0];
        }
        for (int i = 0; i < N; i++)
            delete[] temp.data[i];

        delete[] temp.data;
        return *this;
    }

    
    Matrix<T> multiplyrowonb(int a, T b)
    {
        for (int j = 0; j < this->M; j++) {
            
            this->data[a][j] = this->data[a][j]*b;
        }
        return *this;
    }
    Matrix<T> multiplycolumnonb(int a, T b)
    {
        for (int j = 0; j < this->N; j++) {

            this->data[j][a] = this->data[j][a] * b;
        }
        return *this;
    }

    Matrix<T> row_plus(int a, int b, T c) // добавляет к строке а строку b, умноженную на c
    {
        for (int j = 0; j < this->M; j++) {

            this->data[a][j] += this->data[b][j] * c;
        }
        return *this;
    }

    Matrix<T> column_plus(int a, int b, T c) // добавляет к столбцу а столбец b, умноженный на c
    {
        for (int j = 0; j < this->N; j++) {

            this->data[j][a] += this->data[j][b] * c;
        }
        return *this;
    }

    Matrix<T> operator +(const Matrix& other) //перегрузка сложения матриц
    {
        if (this->N == other.N && this->M == other.M)
        {
            Matrix <T> temp(this->N, this->M);
            for (int i = 0; i < this->N; i++) {
                for (int j = 0; j < this->M; j++) {
                    temp.data[i][j] = 0;
                    temp.data[i][j] += (this->data[i][j] + other.data[i][j]);
                }
            }
           
            return temp;
        }
        else {
            cout << "сложить нельзя" << endl;
        }


    }


    Matrix <T> operator -(const Matrix& other) //перегрузка вычитания матриц
    {
        if (this->N = other.N && this->M = other.M)
        {
            Matrix <T> temp(this->N, this->M);
            for (int i = 0; i < this->N; i++) {
                for (int j = 0; j < this->M; j++)
                    temp.data[i][j] += (this->data[i][j] - other.data[i][j]);
            }
            
            return temp;
        }
        else {
            cout << "вычесть нельзя" << endl;
        }
    }

    

    bool operator !=(T b) // проверка неравенства матрицы и скаляра
    {

        for (int i = 0; i < this->N; i++) {
            for (int j = i; j < this->M; j++) {
                if (i == j)
                {
                    if (this->data[i][j] != b)
                        return true;
                    
                }
            }
        }
        return false;
    }

    bool operator ==(const Matrix& other) { // проверка на равенство матриц
        
            if (this->N == other.N && this->M == other.M) {
                for (int i = 0; i < this->N; i++) {
                    for (int j = 0; j < this->M; j++) {
                        if (this->data[i][j] != other.data[i][j])

                            return false;
                    }
                }
                return true;
            }
            else {

                return false;
            }
        
    }


    bool operator !=(const Matrix& other) { // проверка на неравенство матриц

        if (this->N == other.N && this->M == other.M) {
            for (int i = 0; i < this->N; i++) {
                for (int j = 0; j < this->M; j++) {
                    if (this->data[i][j] != other.data[i][j])

                        return true;
                }
            }
            return false;

        }
        else {

            return true;
        }
    }

    

    Matrix <T> minor(int n, int m)
    {
        Matrix<T> temp(N - 1, M - 1);
        int curi = 0;
        for (int i = 0; i < N; ++i)
        {
            if (i == n) continue;
            int curj = 0;
            for (int j = 0; j < M; ++j)
            {
                if (j == m) continue;
                temp.data[curi][curj] = data[i][j];
                ++curj;
            }
            ++curi;
        }
        return temp;
    }

    T det()
    {
        if (M != N) {
            cout << "нельзя найти определитель у неквадратной матрицы" << endl;
            return 0;
        }
        if (M == 2)
        {
            return data[0][0] * data[1][1] - data[0][1] * data[1][0];
        }
        else
        {
            T temp = 0;
            for (int i = 0; i < M; ++i)
            {
                temp += data[0][i] * minor(0, i).det() * (i % 2 == 0 ? 1 : -1);
            }
            return temp;
        }
    }

    Matrix <T> operator!()
    {
        T det = this->det();
        if (det == 0)
        {
            cout << "у матрицы не существует обратной" << endl;
            return Matrix<T>(N, M);
        }
        Matrix<T> res(N, M);
        for (int i = 0; i < N; ++i)
            for (int j = 0; j < N; ++j)
            {
                res.data[j][i] = minor(i, j).det() * (i + j % 2 == 0 ? 1 : -1) / det;
            }
        return res;
    }



    bool operator ==(T a) //проверка, является матрица единичной или нулевой, равенства матрицы и скаляра
    {
        
        if (a == 1 and this->N == this->M)
        {
            for (int i = 0; i < this->N; i++) {
                for (int j = 0; j < this->M; j++)
                    if (i == j && this->data[i][j] != 1)
                        return false;
                    else {
                        if (this->data[i][j] != 0)
                            return false;
                    }

            }
        }
        if (a == 0)
        {
            for (int i = 0; i < this->N; i++)
                for (int j = 0; j < this->M; j++)
                    if (this->data[i][j] != 0)
                        return false;
        }
        else {
            for (int i = 0; i < this->N; i++) {
                for (int j = i; j < this->M; j++) {
                    if (i == j)
                    {
                        if (this->data[i][j] == a)
                            continue;
                        else
                            return false;
                    }
                }
            }
            return true;
        }
    }



    Matrix<T>& operator = (const Matrix& other) //перегрузка оператора присваивания
    {
        for (int i = 0; i < N; i++)
        {
            delete[] this->data[i];
        }
        delete[] this->data;

        this->N = other.N;
        this->M = other.M;

        data = new T*[N];
        for (int i = 0; i < N; ++i)
        
            data[i] = new T [M];
        
        for (int i = 0; i < this->N; i++) {
            for (int j = 0; j < this->M; j++)
                this->data[i][j] = other.data[i][j];
        }
        return *this;
    }
    
};
int main()

{
    setlocale(LC_ALL, "");
    Matrix <int> f(3,3);
   
}
